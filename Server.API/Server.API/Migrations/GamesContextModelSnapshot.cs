// <auto-generated />
using System;
using GameWorldClassLibrary.Utils;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Server.API.Migrations
{
    [DbContext(typeof(GamesContext))]
    partial class GamesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameWorldClassLibrary.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfCoinsRewarded")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PosterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PosterId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.FarmCell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastTimeEnhanced")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastTimeInteracted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("FarmCells");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.GameState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimePlayed")
                        .HasColumnType("int");

                    b.Property<int>("Turn")
                        .HasColumnType("int");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WinnerId");

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.GameStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EloRating")
                        .HasColumnType("int");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HighestElo")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalDraws")
                        .HasColumnType("int");

                    b.Property<int>("TotalMatches")
                        .HasColumnType("int");

                    b.Property<int>("TotalNumberOfTurn")
                        .HasColumnType("int");

                    b.Property<int>("TotalPlayTime")
                        .HasColumnType("int");

                    b.Property<int>("TotalWins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameStats");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.Games", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.InventoryResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ResourceId");

                    b.ToTable("InventoryResources");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ResourceToDestroyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResourceToInteractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResourceToPlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResourceToDestroyId");

                    b.HasIndex("ResourceToInteractId");

                    b.HasIndex("ResourceToPlaceId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.MarketBuyItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("MarketBuyItems");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.MarketSellResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourceToSellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResourceToSellId");

                    b.ToTable("MarketSellResources");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GameStateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Port")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.PlayerQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EloRating")
                        .HasColumnType("int");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ObstractionHeight")
                        .HasColumnType("int");

                    b.Property<int?>("ObstractionWidth")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerQueue");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ResourceToGetQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ResourceToGetResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResourceToGiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResourceToGiveQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("TradeCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResourceToGetResourceId");

                    b.HasIndex("ResourceToGiveId");

                    b.HasIndex("UserId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountOfItemsBought")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfTradesPerformed")
                        .HasColumnType("int");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastTimeReceivedWater")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TradeHallUnlockTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UserLastLogin")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserLevel")
                        .HasColumnType("int");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AchievementRewardedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.Comment", b =>
                {
                    b.HasOne("GameWorldClassLibrary.Models.User", "Poster")
                        .WithMany()
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.FarmCell", b =>
                {
                    b.HasOne("GameWorldClassLibrary.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameWorldClassLibrary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.GameState", b =>
                {
                    b.HasOne("GameWorldClassLibrary.Models.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.GameStats", b =>
                {
                    b.HasOne("GameWorldClassLibrary.Models.Games", "Game")
                        .WithMany("GameStats")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameWorldClassLibrary.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.InventoryResource", b =>
                {
                    b.HasOne("GameWorldClassLibrary.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameWorldClassLibrary.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.Item", b =>
                {
                    b.HasOne("GameWorldClassLibrary.Models.Resource", "ResourceToDestroy")
                        .WithMany()
                        .HasForeignKey("ResourceToDestroyId");

                    b.HasOne("GameWorldClassLibrary.Models.Resource", "ResourceToInteract")
                        .WithMany()
                        .HasForeignKey("ResourceToInteractId");

                    b.HasOne("GameWorldClassLibrary.Models.Resource", "ResourceToPlace")
                        .WithMany()
                        .HasForeignKey("ResourceToPlaceId");

                    b.Navigation("ResourceToDestroy");

                    b.Navigation("ResourceToInteract");

                    b.Navigation("ResourceToPlace");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.MarketBuyItem", b =>
                {
                    b.HasOne("GameWorldClassLibrary.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.MarketSellResource", b =>
                {
                    b.HasOne("GameWorldClassLibrary.Models.Resource", "ResourceToSell")
                        .WithMany()
                        .HasForeignKey("ResourceToSellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResourceToSell");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.Player", b =>
                {
                    b.HasOne("GameWorldClassLibrary.Models.GameState", null)
                        .WithMany("Players")
                        .HasForeignKey("GameStateId");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.PlayerQueue", b =>
                {
                    b.HasOne("GameWorldClassLibrary.Models.Games", "GameType")
                        .WithMany("Queues")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameWorldClassLibrary.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameType");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.Trade", b =>
                {
                    b.HasOne("GameWorldClassLibrary.Models.Resource", "ResourceToGetResource")
                        .WithMany()
                        .HasForeignKey("ResourceToGetResourceId");

                    b.HasOne("GameWorldClassLibrary.Models.Resource", "ResourceToGive")
                        .WithMany()
                        .HasForeignKey("ResourceToGiveId");

                    b.HasOne("GameWorldClassLibrary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ResourceToGetResource");

                    b.Navigation("ResourceToGive");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.UserAchievement", b =>
                {
                    b.HasOne("GameWorldClassLibrary.Models.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameWorldClassLibrary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.GameState", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("GameWorldClassLibrary.Models.Games", b =>
                {
                    b.Navigation("GameStats");

                    b.Navigation("Queues");
                });
#pragma warning restore 612, 618
        }
    }
}
